package com.web3.java.example;

import java.security.SignatureException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.crypto.Keys;
import org.web3j.crypto.Sign;
import org.web3j.utils.Numeric;

/**
 * This class gives example code of verifying the Signature signed by Web3
 * crypto wallets like MetaMask etc..
 */
public class Web3SignatureVerification {

	private static final Logger log = LoggerFactory.getLogger(Web3SignatureVerification.class);

	
	/**
	 * This method verifies signedMessages which signed by the user wallet (by using his private key).
	 * 
	 * If you are using MVC kind of architecture, you can make this method as REST API call 
	 * where client asks the server to verify the singed message.
	 * 
	 * @param address which is the user account address by using which ( by using his private key) the message is signed.
	 * @param signedMessage the encrypted message which requires a verification.
	 * @throws SignatureException
	 */
	public static void verifySignature(String address, String signedMessage) throws SignatureException {
		/*
		 * If you are using the signature verification for account login, 
		 * You don't need to expect this from client. Server & client can decide on some common message.
		 * 
		 * To improve the security, client and server can add some nonce to the message. 
		 * For now we are not using nonce to it.
		 */
		String originalMessage = "Hello World";
		verifySignature(address, signedMessage, originalMessage);
	}
	
	/**
	 * Internal utility method on servers side. You can do extract things after the both keys are matched.
	 * @param address
	 * @param signedMessage
	 * @param originalMessage
	 * @throws SignatureException
	 */
	public static boolean verifySignature(String address, String signedMessage, String originalMessage)
			throws SignatureException {

		String decryptedAddress = getAddressUsedToSignHashedPrefixedMessage(signedMessage, originalMessage);
		decryptedAddress = "0x" + decryptedAddress;
		System.out.println("Address :          " + address);
		System.out.println("decryptedAddress : " + decryptedAddress);
		// val messageHashBytes = Numeric.hexStringToByteArray(messageHashed)
		
		if(address.equals(decryptedAddress)) {
			// if verification successfull, you can build other business logic here.
			System.out.println("Signature Verified");
			return true;
		} else {
			System.err.println("Signature Verified Failed");
			return false;
		}
	}

	/**
	 * This method using web3j api to retrieve the address which is used for singing the originalMessage.
	 * 
	 * @param signedHash hashed messages which was generated by hashing the originalMessage.
	 *        in MVC framework scenarios, the client application requests the any Crypto Provider (Like Metamask) to sign the message.
	 *        Once signed the messages you will get signedHash. This signedHash will be sent to the server for verification (can be used as authenticating the user account).
	 * 
	 * @param originalMessage the message which client requests Crypto provider for Signing it.
	 * 
	 * @return
	 * @throws SignatureException
	 */
	private static String getAddressUsedToSignHashedPrefixedMessage(String signedHash, String originalMessage)
			throws SignatureException {

		String r = signedHash.substring(0, 66);
		String s = "0x" + signedHash.substring(66, 130);
		String v = "0x" + signedHash.substring(130, 132);
		log.info(v);

		String pubkey = Sign.signedPrefixedMessageToKey(originalMessage.getBytes(), new Sign.SignatureData(
				Numeric.hexStringToByteArray(v)[0], Numeric.hexStringToByteArray(r), Numeric.hexStringToByteArray(s)))
				.toString(16);

		log.info("Pubkey: " + pubkey);
		return Keys.getAddress(pubkey);
	}

	public static void main(String[] args) throws SignatureException {
		String signedMessageHash = "0x10a5e7a74dc389b8ecc147d39f60d53537f5a68dad25811cc0e0c3a3670bbac4574b61b32345b1a4322b6ec08657a2575156480cd18cf701f912c54373d5dd9b1c";
		String address = "0xbd81bc79c7b432ae8c1e160f8be41f745c7d2696";
		

		Web3SignatureVerification.verifySignature(address, signedMessageHash);
	}
}
